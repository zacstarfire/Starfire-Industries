# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: My Test

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [$default-branch]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:        
      - name: 1- gem update
        run: /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/gem update --system
      - name: 2- install bundler
        run: /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/gem install bundler
      - name: 3- install j1-template
        run: /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/gem install j1-template
      - name: 4- j1 generate
        run: /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/j1 generate
      - name: 5- j1 setup
        run: /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/j1 setup
      - name: 6- j1 site
        run: /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/j1 site
        
          # /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/gem install bundler
          # /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/gem install j1-template
          # j1 setup
          # j1 site

             # /opt/hostedtoolcache/Ruby/3.1.4/x64/bin/bundle lock --add-platform x86_64-linux
             
             
